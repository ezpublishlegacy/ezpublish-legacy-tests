--- bin/php/ezpgenerateautoloads.php
+++ bin/php/ezpgenerateautoloads.php
@@ -187,7 +187,6 @@
 try
 {
     $autoloadGenerator->buildAutoloadArrays();
-    $autoloadGenerator->buildPHPUnitConfigurationFile();
 
     // If we are showing progress output, let's print the list of warnings at
     // the end.

--- kernel/private/classes/ezautoloadgenerator.php
+++ kernel/private/classes/ezautoloadgenerator.php
@@ -1308,72 +1308,5 @@
     {
         $this->output = $outputObject;
     }
-
-    /**
-     * Create phpunit configuration file adding blacklist from tests/ and extension tests
-     *
-     * It writes file phpunit.xml in ./tests directory
-     *
-     * @return DOMDocument;
-     */
-    public function buildPHPUnitConfigurationFile()
-    {
-        if ( ~$this->mask & self::MODE_TESTS )
-        {
-            return;
-        }
-
-        $this->log( 'Creating phpunit configuration file.' );
-
-        $dom = new DOMDocument( '1.0', 'utf-8' );
-        $dom->formatOutput = true;
-
-        $baseDir = getcwd();
-        $filter = $dom->createElement( 'filter' );
-        $blacklist = $dom->createElement( 'blacklist' );
-
-        /* PHPUnit docs says we should either use whitelist or blacklist ( if a whitelist exists, the blacklsit will be ignored )
-         * Since whitelisting only works on source files containing classes, we base this on blacklisting
-         */
-        /*
-        $whitelist = $dom->createElement( 'whitelist' );
-        $autoloadArray = @include 'autoload/ezp_kernel.php';
-        foreach ( $autoloadArray as $class => $filename )
-        {
-            $file = $dom->createElement( 'file', $baseDir . DIRECTORY_SEPARATOR . $filename );
-            $whitelist->appendChild($file);
-        }
-        $filter->appendChild($whitelist);
-        */
-
-        //Blacklist tests in extension/
-        $extensionDir = $this->options->basePath . '/extension';
-
-        if ( file_exists( $extensionDir ) )
-        {
-            foreach ( scandir( $extensionDir ) as $file )
-            {
-                if ( ( $file === '.' ) || ( $file === '..' ) )
-                    continue;
-
-                $testDirectory = "$extensionDir/$file/tests";
-                if ( is_dir( $testDirectory ) )
-                {
-                    $blacklist->appendChild( $dom->createElement( 'directory', $testDirectory ) );
-                }
-            }
-        }
-
-        $blacklist->appendChild( $dom->createElement( 'directory', "$baseDir/tests" ) );
-        $filter->appendChild( $blacklist );
-        $root = $dom->createElement( 'phpunit' );
-        $root->appendChild( $filter );
-        $dom->appendChild( $root );
-
-        file_put_contents( "$baseDir/tests/phpunit.xml", $dom->saveXML() );
-
-        return $dom;
-    }
-
 }
 ?>

--- tests/runtests.php
+++ tests/runtests.php
@@ -14,27 +14,22 @@
 require_once 'autoload.php';
 require_once 'PHPUnit/Autoload.php';
 
-require_once 'PHPUnit/Util/Filter.php';
-
-// Whitelist all eZ Publish kernel files
-$baseDir = getcwd();
-$autoloadArray = include 'autoload/ezp_kernel.php';
-foreach ( $autoloadArray as $class => $file )
-{
-    // Exclude files from the tests directory
-    if ( strpos( $file, 'tests' ) !== 0 )
-    {
-//        PHPUnit_Util_Filter::addFileToWhitelist( "{$baseDir}/{$file}" ); //fixme
-    }
-}
-
 $cli = eZCLI::instance();
 $script = eZScript::instance( array( 'description' => ( "eZ Publish Test Runner\n\n" .
-                                                         "sets up an eZ Publish testing environment" .
-                                                         "\n" ),
-                                      'use-session' => false,
-                                      'use-modules' => true,
-                                      'use-extensions' => true ) );
+        "sets up an eZ Publish testing environment" .
+        "\n" ),
+        'use-session' => false,
+        'use-modules' => true,
+        'use-extensions' => true ) );
+
+
+if ( !class_exists( 'ezpTestRunner', true ) )
+{
+    echo "The ezpTestRunner class isn't defined. Are the tests autoloads generated ?\n"
+        . "You can generate them using php bin/php/ezpgenerateautoloads.php -s";
+
+    $script->shutdown(1);
+}
 
 // Override INI override folder from settings/override to
 // tests/settings to not read local override settings
@@ -46,7 +41,6 @@
 eZContentLanguage::expireCache();
 
 $script->startup();
-// $options = $script->getOptions();
 $script->initialize();
 
 // Avoids Fatal error: eZ Publish did not finish its request if die() is used.
@@ -59,12 +53,6 @@
     die( "PHPUnit 3.5.0 (or later) is required to run this test suite.\n" );
 }
 
-require_once 'PHP/CodeCoverage.php';
-$codeCoverage = new PHP_CodeCoverage;
-$codeCoverage->filter()->addFileToBlacklist( __FILE__, 'PHPUNIT' );
-
-//require_once 'bootstrap.php';
-
 try
 {
     $runner = ezpTestRunner::instance();
--- tests/toolkit/ezptestrunner.php
+++ tests/toolkit/ezptestrunner.php
@@ -11,37 +11,33 @@
 
 class ezpTestRunner extends PHPUnit_TextUI_Command
 {
-    protected $suite = null;
+    /**
+     * @var ezpTestRunner
+     */
     static private $instance = null;
-    
+
+    /**
+     * Enables additional parameters for the test runner
+     */
     public function __construct()
     {
-        //parent::__construct();
+        $this->longOptions['list-suites'] = 'handleListSuites';
         $this->longOptions['list-tests'] = 'handleListTests';
         $this->longOptions['dsn='] = 'handleDsn';
         $this->longOptions['db-per-test'] = 'handleDbPerTest';
-        
-/*        self::$consoleInput = new ezcConsoleInput();
-        // Configuration XML File option
-        $configuration = new ezcConsoleOption( '', 'configuration', ezcConsoleInput::TYPE_STRING );
-        $configuration->shorthelp = "Read configuration from XML file.";
-        self::$consoleInput->registerOption( $configuration );
-        
-        // DSN option
-        $dsn = new ezcConsoleOption( 'D', 'dsn', ezcConsoleInput::TYPE_STRING );
-        $dsn->shorthelp = "Use the database specified with a DSN: type://user:password@host/database.";
-        $dsn->longhelp = "An example to connect with the local MySQL database is:\n";
-        $dsn->longhelp .= "mysqli://root@mypass@localhost/unittests";
-        self::$consoleInput->registerOption( $dsn );
 
-        // Database-per-test option
-        $dbPerTest = new ezcConsoleOption( '', 'db-per-test', ezcConsoleInput::TYPE_NONE );
-        $dbPerTest->shorthelp = "Use a clean database per test";
-        self::$consoleInput->registerOption( $dbPerTest );
-
-        self::$consoleInput->process(); */
+        // Default values
+        $this->arguments['list-suites'] = false;
+        $this->arguments['list-tests'] = false;
+        $this->arguments['dsn'] = '';
+        $this->arguments['db-per-test'] = false;
     }
 
+    /**
+     * Returns the ezpTestRunner instance
+     *
+     * @return ezpTestRunner
+     */
     static public function instance()
     {
         if( self::$instance === null )
@@ -50,46 +46,41 @@
         }
         return self::$instance;
     }
-    
-    /**
-     * Return the argument $argumentName given on the command line
-     * $argumentName must be the long option name ( 'configuration' ), not the short option name ( 'c' )
-     **/
-    public function getLongOption( $argumentName )
-    {
-        if( array_key_exists( $argumentName, $this->longOptions ) or array_key_exists( "$argumentName=", $this->longOptions ) )
-        {
-            if( array_key_exists( $argumentName, $this->arguments ) )
-            {
-                return $this->arguments[$argumentName];
-            } else
-            {
-                return null;
-            }
-        } else
-        {
-            //fixme : throw exception
-            var_dump( 'Error : invalid argument name : ' . $argumentName);
-            var_dump( $this->longOptions );
-            die;
-        }
-    }
 
+    /**
+     * If called, will output a list of all available tests
+     *
+     * @see handleCustomTestSuite()
+     */
     public function handleListTests()
     {
         $this->arguments['list-tests'] = true;
     }
-    
+
+    /**
+     * Stores the given DSN string into the runners arguments array
+     *
+     * @see dsn()
+     * @param string $value
+     */
     public function handleDsn( $value )
     {
         $this->arguments['dsn'] = $value;
     }
-    
+
+    /**
+     * Sets the argument 'db-per-test' to true, which means that every test will be
+     * performed on a clean database
+     */
     public function handleDbPerTest()
     {
         $this->arguments['db-per-test'] = true;
     }
-    
+
+    /**
+     * Extends PHPUnit's default help text with the additional options coming with
+     * this runner
+     */
     protected function showHelp()
     {
         parent::showHelp();
@@ -99,26 +90,36 @@
   --dsn <resource>          Use the database specified with a DSN: type://user:password@host/database.
                             An example to connect with the local MySQL database is:
                             mysqli://root@mypass@localhost/unittests
+  --list-suites             Lists all suites
   --list-tests              Lists all tests
 
 EOT;
     }
-    
+
     /**
-     * Scans a set of directories looking for suite.php to add to include.
+     * Returns the eZ Publish test suite
      *
-     * @param string $directories
-     * @param string $params
+     * If $directories are given, only the tests in these directories will be executed.
+     * If omitted, the default eZ Publish test suite and all extension test suites will be executed.
+     *
+     * @param array $directories
      * @return ezpTestSuite $suite
      */
-     //taken from old ezptestrunner
-    protected function prepareTests( $directories, $params )
+    protected function prepareTests( array $directories = array() )
     {
-        if ( count( $directories ) <= 0 )
-            return self::suite();
-
-        $suite = new ezpTestSuite;
-        $suite->setName( "eZ Publish Test Suite" );
+        // If no $directories are given, we return the standard eZ Publish test suite
+        if ( count( $directories ) === 0 )
+        {
+            // The default eZ Publish test suite with all core tests
+            $suite = new eZTestSuite();
+            // Add the extension directories to search for test suites
+            $directories = eZDir::findSubitems( eZExtension::baseDirectory(), 'dl', true );
+        }
+        else
+        {
+            $suite = new ezpTestSuite();
+            $suite->setName( "eZ Publish Test Suite" );
+        }
 
         foreach ( $directories as $dir )
         {
@@ -142,7 +143,8 @@
             }
             else
             {
-                print( "Unable to load $file\n" );
+                // No suite.php found anywhere in given (extension) directory.
+                print( "No tests found for $dir\n" );
             }
         }
 
@@ -182,35 +184,48 @@
         return $suite;
     }
 
+    /**
+     * Checks if an argument has been given to the testrunner and uses it to prepare the tests
+     * If set, the test runner will ONLY execute the given tests and omit the kernel
+     * @see prepareTests()
+     */
     protected function handleCustomTestSuite()
     {
-        $this->suite = $this->prepareTests( null, null );
+        $this->arguments['test'] = $this->prepareTests( $this->options[1] );
 
-        return $this->suite;
+        if( $this->arguments['list-suites'] )
+        {
+            $this->listSuites( $this->arguments['test'] );
+        }
+
+        if( $this->arguments['list-tests'] )
+        {
+            $this->listTests( $this->arguments['test'] );
+        }
     }
-    
-     /**
-     * Prints all tests found in $suite
+
+    /**
+     * Displays a list of available tests
      *
-     * @param ezpTestCase $suite
+     * @param ezpTestSuite $suite
      */
-    protected function listTests( $suite )
+    protected function listTests( ezpTestSuite $suite )
     {
-        $iterator = $suite->getIterator();
+        $tests = $this->getTests( $suite );
+
         print "Available test(s):\n";
-
-        foreach ( $iterator as $test )
+        foreach( $tests as $test )
         {
-            $reflectionClass = new ReflectionClass( $test );
-            $currentTest = $reflectionClass->getName() . "::" . $test->getName();
-            print( "- $currentTest\n" );
+            print "- {$test}\n";
         }
+        exit( PHPUnit_TextUI_TestRunner::SUCCESS_EXIT);
     }
 
     /**
      * Prepends the extension path to $path if not already in $path
      *
      * @param string $path
+     * @return string
      */
     protected function normalizeExtensionPath( $path )
     {
@@ -221,9 +236,10 @@
     }
 
     /**
-     * Returns the first class name found inside of $file
+     * Returns the first class name found inside of $file or false if no class is in the file
      *
      * @param string $file
+     * @return string|bool
      */
     static public function getClassName( $file )
     {
@@ -231,7 +247,7 @@
         // returns a path with platform specific style of directory separator
         if ( DIRECTORY_SEPARATOR != '/' )
         {
-           $file = strtr( $file, '/', DIRECTORY_SEPARATOR );
+            $file = strtr( $file, '/', DIRECTORY_SEPARATOR );
         }
 
         // Resolve symlinks and expand path to file
@@ -253,29 +269,20 @@
                 return $classes[$i];
             }
         }
+
+        return false;
     }
 
     /**
-     * Returns a ezpDsn object created from the dsn console input
+     * Returns an ezpDsn object created from the dsn console input
      *
-     * @throws ezcConsoleOptionMandatoryViolationException if no dsn input option is found
      * @return ezpDsn dsn
      */
     static public function dsn()
     {
         $testRunner = ezpTestRunner::instance();
-        if( array_key_exists( 'dsn', $testRunner->arguments ) )
-        {
-            $dsnOption = $testRunner->arguments['dsn'];
-            $dsn = new ezpDsn( $dsnOption );
-        }
-        else
-        {
-            var_dump("Warning : dsn parameter mandatory");
-            //fixme
-            //throw new ezcConsoleOptionMandatoryViolationException( $dsnOption );
-        }
-        return $dsn;
+
+        return new ezpDsn( $testRunner->arguments['dsn'] );
     }
 
     /**
@@ -286,621 +293,149 @@
     static public function dbPerTest()
     {
         $testRunner = ezpTestRunner::instance();
-        if( array_key_exists( 'db-per-test', $testRunner->arguments ) )
-        {
-            return $testRunner->arguments['db-per-test'];
-        }
 
-        return false;
+        return $testRunner->arguments['db-per-test'];
     }
-    
+
     /**
-     * This function is cut&paste from PHPUnit_TextUI_Command::run
-     * - We don't require the 'test' parameter (default unnamed parameter ). Instead we'll run the whole test suite (unless filters are applied)
-     * - Added support for --list-tests parameter
-     **/
-    /**
-     * @param array   $argv
-     * @param boolean $exit
+     * Additionally ensures that the required argument "--dsn" is set
+     *
+     * @inheritdoc
+     * @param array $argv
      */
-    public function run(array $argv, $exit = TRUE)
-    {
-        $this->handleArguments($argv);
-        
-        // *** BEGIN ezp custom code BEGIN ***
-        if( isset($this->arguments['list-tests']) )
-        {
-            $this->listTests( $this->suite );
-            exit(PHPUnit_TextUI_TestRunner::SUCCESS_EXIT);
-        }
-        // *** END ezp custom code END***
-        
-
-        $runner = new PHPUnit_TextUI_TestRunner($this->arguments['loader']);
-
-        // *** BEGIN ezp custom code BEGIN ***
-        // **Following code is removed compared to the original implementation
-        /*if (is_object($this->arguments['test']) &&
-            $this->arguments['test'] instanceof PHPUnit_Framework_Test) {
-            $suite = $this->arguments['test'];
-        } else {
-            $suite = $runner->getTest(
-              $this->arguments['test'],
-              $this->arguments['testFile'],
-              $this->arguments['syntaxCheck']
-            );
-        }*/
-        // **And this line is added
-        $suite = $this->suite;
-        // *** END ezp custom code END ***
-
-        if (count($suite) == 0) {
-            $skeleton = new PHPUnit_Util_Skeleton_Test(
-              $suite->getName(),
-              $this->arguments['testFile']
-            );
-
-            $result = $skeleton->generate(TRUE);
-
-            if (!$result['incomplete']) {
-                eval(str_replace(array('<?php', '?>'), '', $result['code']));
-                $suite = new PHPUnit_Framework_TestSuite(
-                  $this->arguments['test'] . 'Test'
-                );
-            }
-        }
-
-        if ($this->arguments['listGroups']) {
-            PHPUnit_TextUI_TestRunner::printVersionString();
-
-            print "Available test group(s):\n";
-
-            $groups = $suite->getGroups();
-            sort($groups);
-
-            foreach ($groups as $group) {
-                print " - $group\n";
-            }
-
-            exit(PHPUnit_TextUI_TestRunner::SUCCESS_EXIT);
-        }
-
-        unset($this->arguments['test']);
-        unset($this->arguments['testFile']);
-
-        try {
-            $result = $runner->doRun($suite, $this->arguments);
-        }
-
-        catch (PHPUnit_Framework_Exception $e) {
-            print $e->getMessage() . "\n";
-        }
-
-        if ($exit) {
-            if (isset($result) && $result->wasSuccessful()) {
-                exit(PHPUnit_TextUI_TestRunner::SUCCESS_EXIT);
-            }
-
-            else if (!isset($result) || $result->errorCount() > 0) {
-                exit(PHPUnit_TextUI_TestRunner::EXCEPTION_EXIT);
-            }
-
-            else {
-                exit(PHPUnit_TextUI_TestRunner::FAILURE_EXIT);
-            }
-        }
-    }
-
-
-
-    /**
-     * This function is cut&paste from PHPUnit_TextUI_Command::handleArguments
-     * Removed the need for a required unnamed command option ( 'test')
-     **/
     protected function handleArguments(array $argv)
     {
-        try {
-            $this->options = PHPUnit_Util_Getopt::getopt(
-              $argv,
-              'd:c:',
-              array_keys($this->longOptions)
-            );
-        }
-
-        catch (RuntimeException $e) {
-            PHPUnit_TextUI_TestRunner::showError($e->getMessage());
-        }
-
-        $skeletonClass = FALSE;
-        $skeletonTest  = FALSE;
-
-        foreach ($this->options[0] as $option) {
-            switch ($option[0]) {
-                case '--colors': {
-                    $this->arguments['colors'] = TRUE;
-                }
-                break;
-
-                case '--bootstrap': {
-                    $this->arguments['bootstrap'] = $option[1];
-                }
-                break;
-
-                case 'c':
-                case '--configuration': {
-                    $this->arguments['configuration'] = $option[1];
-                }
-                break;
-
-                case '--coverage-clover': {
-                    if (extension_loaded('tokenizer') &&
-                        extension_loaded('xdebug')) {
-                        $this->arguments['coverageClover'] = $option[1];
-                    } else {
-                        if (!extension_loaded('tokenizer')) {
-                            $this->showMessage(
-                              'The tokenizer extension is not loaded.'
-                            );
-                        } else {
-                            $this->showMessage(
-                              'The Xdebug extension is not loaded.'
-                            );
-                        }
-                    }
-                }
-                break;
-
-                case '--coverage-html': {
-                    if (extension_loaded('tokenizer') &&
-                        extension_loaded('xdebug')) {
-                        $this->arguments['reportDirectory'] = $option[1];
-                    } else {
-                        if (!extension_loaded('tokenizer')) {
-                            $this->showMessage(
-                              'The tokenizer extension is not loaded.'
-                            );
-                        } else {
-                            $this->showMessage(
-                              'The Xdebug extension is not loaded.'
-                            );
-                        }
-                    }
-                }
-                break;
-
-                case 'd': {
-                    $ini = explode('=', $option[1]);
-
-                    if (isset($ini[0])) {
-                        if (isset($ini[1])) {
-                            ini_set($ini[0], $ini[1]);
-                        } else {
-                            ini_set($ini[0], TRUE);
-                        }
-                    }
-                }
-                break;
-
-                case '--debug': {
-                    $this->arguments['debug'] = TRUE;
-                }
-                break;
-
-                case '--help': {
-                    $this->showHelp();
-                    exit(PHPUnit_TextUI_TestRunner::SUCCESS_EXIT);
-                }
-                break;
-
-                case '--filter': {
-                    $this->arguments['filter'] = $option[1];
-                }
-                break;
-
-                case '--group': {
-                    $this->arguments['groups'] = explode(',', $option[1]);
-                }
-                break;
-
-                case '--exclude-group': {
-                    $this->arguments['excludeGroups'] = explode(
-                      ',', $option[1]
-                    );
-                }
-                break;
-
-                case '--include-path': {
-                    $includePath = $option[1];
-                }
-                break;
-
-                case '--list-groups': {
-                    $this->arguments['listGroups'] = TRUE;
-                }
-                break;
-
-                case '--loader': {
-                    $this->arguments['loader'] = $option[1];
-                }
-                break;
-
-                case '--log-dbus': {
-                    $this->arguments['logDbus'] = TRUE;
-                }
-                break;
-
-                case '--log-json': {
-                    $this->arguments['jsonLogfile'] = $option[1];
-                }
-                break;
-
-                case '--log-junit': {
-                    $this->arguments['junitLogfile'] = $option[1];
-                }
-                break;
-
-                case '--log-tap': {
-                    $this->arguments['tapLogfile'] = $option[1];
-                }
-                break;
-
-                case '--process-isolation': {
-                    $this->arguments['processIsolation'] = TRUE;
-                    $this->arguments['syntaxCheck']      = FALSE;
-                }
-                break;
-
-                case '--repeat': {
-                    $this->arguments['repeat'] = (int)$option[1];
-                }
-                break;
-
-                case '--stderr': {
-                    $this->arguments['printer'] = new PHPUnit_TextUI_ResultPrinter(
-                      'php://stderr',
-                      isset($this->arguments['verbose']) ? $this->arguments['verbose'] : FALSE
-                    );
-                }
-                break;
-
-                case '--stop-on-error': {
-                    $this->arguments['stopOnError'] = TRUE;
-                }
-                break;
-
-                case '--stop-on-failure': {
-                    $this->arguments['stopOnFailure'] = TRUE;
-                }
-                break;
-
-                case '--stop-on-incomplete': {
-                    $this->arguments['stopOnIncomplete'] = TRUE;
-                }
-                break;
-
-                case '--stop-on-skipped': {
-                    $this->arguments['stopOnSkipped'] = TRUE;
-                }
-                break;
-
-                case '--skeleton-test': {
-                    $skeletonTest  = TRUE;
-                    $skeletonClass = FALSE;
-                }
-                break;
-
-                case '--skeleton-class': {
-                    $skeletonClass = TRUE;
-                    $skeletonTest  = FALSE;
-                }
-                break;
-
-                case '--tap': {
-                    $this->arguments['printer'] = new PHPUnit_Util_Log_TAP;
-                }
-                break;
-
-                case '--story': {
-                    $this->showMessage(
-                      'The --story functionality is deprecated and ' .
-                      'will be removed in the future.',
-                      FALSE
-                    );
-
-                    $this->arguments['printer'] = new PHPUnit_Extensions_Story_ResultPrinter_Text;
-                }
-                break;
-
-                case '--story-html': {
-                    $this->showMessage(
-                      'The --story-html functionality is deprecated and ' .
-                      'will be removed in the future.',
-                      FALSE
-                    );
-
-                    $this->arguments['storyHTMLFile'] = $option[1];
-                }
-                break;
-
-                case '--story-text': {
-                    $this->showMessage(
-                      'The --story-text functionality is deprecated and ' .
-                      'will be removed in the future.',
-                      FALSE
-                    );
-
-                    $this->arguments['storyTextFile'] = $option[1];
-                }
-                break;
-
-                case '--syntax-check': {
-                    $this->arguments['syntaxCheck'] = TRUE;
-                }
-                break;
-
-                case '--testdox': {
-                    $this->arguments['printer'] = new PHPUnit_Util_TestDox_ResultPrinter_Text;
-                }
-                break;
-
-                case '--testdox-html': {
-                    $this->arguments['testdoxHTMLFile'] = $option[1];
-                }
-                break;
-
-                case '--testdox-text': {
-                    $this->arguments['testdoxTextFile'] = $option[1];
-                }
-                break;
-
-                case '--no-configuration': {
-                    $this->arguments['useDefaultConfiguration'] = FALSE;
-                }
-                break;
-
-                case '--no-globals-backup': {
-                    $this->arguments['backupGlobals'] = FALSE;
-                }
-                break;
-
-                case '--static-backup': {
-                    $this->arguments['backupStaticAttributes'] = TRUE;
-                }
-                break;
-
-                case '--verbose': {
-                    $this->arguments['verbose'] = TRUE;
-                }
-                break;
-
-                case '--version': {
-                    PHPUnit_TextUI_TestRunner::printVersionString();
-                    exit(PHPUnit_TextUI_TestRunner::SUCCESS_EXIT);
-                }
-                break;
-
-                case '--wait': {
-                    $this->arguments['wait'] = TRUE;
-                }
-                break;
-
-                case '--strict': {
-                    $this->arguments['strict'] = TRUE;
-                }
-                break;
-                
-                default: {
-                    $optionName = str_replace('--', '', $option[0]);
-
-                    if (isset($this->longOptions[$optionName])) {
-                        $handler = $this->longOptions[$optionName];
-                    }
-
-                    else if (isset($this->longOptions[$optionName . '='])) {
-                        $handler = $this->longOptions[$optionName . '='];
-                    }
+        parent::handleArguments($argv);
 
-                    if (isset($handler) && is_callable(array($this, $handler))) {
-                        $this->$handler($option[1]);
-                    }
-                }
-            }
-        }
-
-        if (isset($this->arguments['printer']) &&
-            $this->arguments['printer'] instanceof PHPUnit_Extensions_Story_ResultPrinter_Text &&
-            isset($this->arguments['processIsolation']) &&
-            $this->arguments['processIsolation']) {
-            $this->showMessage(
-              'The story result printer cannot be used in process isolation.'
-            );
-        }
-
-        $this->handleCustomTestSuite();
-
-        if (!isset($this->arguments['test'])) {
-            if (isset($this->options[1][0])) {
-                $this->arguments['test'] = $this->options[1][0];
-            }
-
-            if (isset($this->options[1][1])) {
-                $this->arguments['testFile'] = $this->options[1][1];
-            } else {
-                $this->arguments['testFile'] = '';
-            }
-
-            if (isset($this->arguments['test']) && is_file($this->arguments['test'])) {
-                $this->arguments['testFile'] = realpath($this->arguments['test']);
-                $this->arguments['test']     = substr($this->arguments['test'], 0, strrpos($this->arguments['test'], '.'));
-            }
-        }
-
-        if (isset($includePath)) {
-            ini_set(
-              'include_path',
-              $includePath . PATH_SEPARATOR . ini_get('include_path')
-            );
+        if ( empty( $this->arguments['dsn'] ) )
+        {
+            PHPUnit_TextUI_TestRunner::showError( 'The parameter --dsn is required' );
         }
+    }
 
-        if (isset($this->arguments['bootstrap'])) {
-            $this->handleBootstrap($this->arguments['bootstrap'], $this->arguments['syntaxCheck']);
-        }
+    /**
+     * If called, will output a list of all available suites
+     *
+     * @see handleCustomTestSuite()
+     */
+    public function handleListSuites()
+    {
+        $this->arguments['list-suites'] = true;
+    }
 
-        if ($this->arguments['loader'] !== NULL) {
-            $this->arguments['loader'] = $this->handleLoader($this->arguments['loader']);
+    /**
+     * Displays a list of available test suites
+     *
+     * @param ezpTestSuite $suite
+     */
+    public function listSuites( ezpTestSuite $suite )
+    {
+        $suites = $this->getSuites( $suite );
+
+        print "Available suite(s):\n";
+        foreach( $suites as $s )
+        {
+            print "- {$s}\n";
         }
+        exit( PHPUnit_TextUI_TestRunner::SUCCESS_EXIT);
+    }
 
-        if (isset($this->arguments['configuration']) &&
-            is_dir($this->arguments['configuration'])) {
-            $configurationFile = $this->arguments['configuration'] .
-                                 '/phpunit.xml';
-
-            if (file_exists($configurationFile)) {
-                $this->arguments['configuration'] = realpath(
-                  $configurationFile
-                );
-            }
-
-            else if (file_exists($configurationFile . '.dist')) {
-                $this->arguments['configuration'] = realpath(
-                  $configurationFile . '.dist'
-                );
+    /**
+     * Returns an array with the names of all available test suites which are children of $suite
+     *
+     * @param ezpTestSuite $suite
+     * @return array
+     */
+    protected function getSuites( ezpTestSuite $suite )
+    {
+        $suites = array();
+
+        /** @var PHPUnit_Framework_Test[]|ezpTestSuite[] $tests */
+        $tests = $suite->tests();
+
+        foreach( $tests as $test )
+        {
+            $reflectionClass = new ReflectionClass( $test );
+
+            if ( $reflectionClass->isSubclassOf( 'PHPUnit_Framework_TestSuite' ) )
+            {
+                $suites[] = $reflectionClass->getName();
             }
-        }
 
-        else if (!isset($this->arguments['configuration']) &&
-                 $this->arguments['useDefaultConfiguration']) {
-            if (file_exists('phpunit.xml')) {
-                $this->arguments['configuration'] = realpath('phpunit.xml');
-            } else if (file_exists('phpunit.xml.dist')) {
-                $this->arguments['configuration'] = realpath(
-                  'phpunit.xml.dist'
-                );
+            if ( $reflectionClass->isSubclassOf( 'ezpTestSuite' ) )
+            {
+                $suites = array_merge( $suites, $this->getSuites( $test ) );
             }
         }
 
-        if (isset($this->arguments['configuration'])) {
-            try {
-                $configuration = PHPUnit_Util_Configuration::getInstance(
-                  $this->arguments['configuration']
-                );
-            }
-
-            catch (Exception $e) {
-                print $e->getMessage() . "\n";
-                exit(PHPUnit_TextUI_TestRunner::FAILURE_EXIT);
-            }
-
-            $phpunit = $configuration->getPHPUnitConfiguration();
+        sort( $suites );
 
-            if (isset($phpunit['syntaxCheck'])) {
-                $this->arguments['syntaxCheck'] = $phpunit['syntaxCheck'];
-            }
-
-            if (isset($phpunit['testSuiteLoaderClass'])) {
-                if (isset($phpunit['testSuiteLoaderFile'])) {
-                    $file = $phpunit['testSuiteLoaderFile'];
-                } else {
-                    $file = '';
-                }
-
-                $this->arguments['loader'] = $this->handleLoader(
-                  $phpunit['testSuiteLoaderClass'], $file
-                );
-            }
-
-            $configuration->handlePHPConfiguration();
-
-            if (!isset($this->arguments['bootstrap'])) {
-                $phpunitConfiguration = $configuration->getPHPUnitConfiguration();
-
-                if (isset($phpunitConfiguration['bootstrap'])) {
-                    $this->handleBootstrap($phpunitConfiguration['bootstrap'], $this->arguments['syntaxCheck']);
-                }
-            }
-
-            $browsers = $configuration->getSeleniumBrowserConfiguration();
-
-            if (!empty($browsers)) {
-                PHPUnit_Extensions_SeleniumTestCase::$browsers = $browsers;
-            }
-
-            if (!isset($this->arguments['test'])) {
-                $testSuite = $configuration->getTestSuiteConfiguration(
-                  $this->arguments['syntaxCheck']
-                );
+        return $suites;
+    }
 
-                if ($testSuite !== NULL) {
-                    $this->arguments['test'] = $testSuite;
-                }
-            }
+    /**
+     * Returns an array with the names of all available tests which are children of $suite
+     *
+     * @param ezpTestSuite $suite
+     * @return string[]
+     */
+    protected function getTests( ezpTestSuite $suite )
+    {
+        $tests = array();
+
+        $iterator = $suite->getIterator();
+
+        /** @var PHPUnit_Framework_TestCase $test */
+        foreach ( $iterator as $test )
+        {
+            $reflectionClass = new ReflectionClass( $test );
+            $tests[] = $reflectionClass->getName() . "::" . $test->getName();
         }
 
-        if (isset($this->arguments['test']) && is_string($this->arguments['test']) && substr($this->arguments['test'], -5, 5) == '.phpt') {
-            $test = new PHPUnit_Extensions_PhptTestCase($this->arguments['test']);
+        sort( $tests );
 
-            $this->arguments['test'] = new PHPUnit_Framework_TestSuite;
-            $this->arguments['test']->addTest($test);
-        }
+        return $tests;
+    }
 
-        // *** BEGIN ezp custom code BEGIN ***
-        // Commented out this stuff
-/*        if (!isset($this->arguments['test']) ||
-            (isset($this->arguments['testDatabaseLogRevision']) && !isset($this->arguments['testDatabaseDSN']))) {
-            $this->showHelp();
-            exit(PHPUnit_TextUI_TestRunner::EXCEPTION_EXIT);
-        }*/
-        // *** END ezp custom code END ***
+    /**
+     * Creates a test runner with eZ Publish specific code coverage configuration
+     *
+     * @inheritdoc
+     * @return PHPUnit_TextUI_TestRunner
+     */
+    protected function createRunner()
+    {
+        $filter = $this->createCodeCoverageFilter();
+        return new PHPUnit_TextUI_TestRunner($this->arguments['loader'], $filter );
+    }
 
-        if (!isset($this->arguments['syntaxCheck'])) {
-            $this->arguments['syntaxCheck'] = FALSE;
+    /**
+     * Whitelists all kernel, lib and extension classes for code coverage
+     *
+     * @return PHP_CodeCoverage_Filter
+     */
+    protected function createCodeCoverageFilter()
+    {
+        $filter = new PHP_CodeCoverage_Filter();
+
+        // Add kernel classes to whitelist
+        $kernelClassFiles = require 'autoload/ezp_kernel.php';
+        $filter->addFilesToWhitelist( $kernelClassFiles );
+
+        // Add extension classes to whitelist
+        if ( !is_file( 'var/autoload/ezp_extension.php' ) )
+        {
+            PHPUnit_TextUI_TestRunner::showError(
+                "Please generate the extension autoloads first.\n"
+                ."You can generate them using php bin/php/ezpgenerateautoloads.php -e"
+            );
         }
 
-        if ($skeletonClass || $skeletonTest) {
-            if (isset($this->arguments['test']) && $this->arguments['test'] !== FALSE) {
-                PHPUnit_TextUI_TestRunner::printVersionString();
-
-                if ($skeletonClass) {
-                    $class = 'PHPUnit_Util_Skeleton_Class';
-                } else {
-                    $class = 'PHPUnit_Util_Skeleton_Test';
-                }
-
-                try {
-                    $args      = array();
-                    $reflector = new ReflectionClass($class);
+        $extensionClassFiles = require 'var/autoload/ezp_extension.php';
+        $filter->addFilesToWhitelist( $extensionClassFiles );
 
-                    for ($i = 0; $i <= 3; $i++) {
-                        if (isset($this->options[1][$i])) {
-                            $args[] = $this->options[1][$i];
-                        }
-                    }
-
-                    $skeleton = $reflector->newInstanceArgs($args);
-                    $skeleton->write();
-                }
-
-                catch (Exception $e) {
-                    print $e->getMessage() . "\n";
-                    exit(PHPUnit_TextUI_TestRunner::FAILURE_EXIT);
-                }
-
-                printf(
-                  'Wrote skeleton for "%s" to "%s".' . "\n",
-                  $skeleton->getOutClassName(),
-                  $skeleton->getOutSourceFile()
-                );
-
-                exit(PHPUnit_TextUI_TestRunner::SUCCESS_EXIT);
-            } else {
-                $this->showHelp();
-                exit(PHPUnit_TextUI_TestRunner::EXCEPTION_EXIT);
-            }
-        }
+        return $filter;
     }
-    
 }
 
-
-
 ?>

